# -*- coding: utf-8 -*-
"""preprocessingDatabase.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vJN151UQQDljCfNlyvjnXYimLIhSgTfw
"""

### ---------- Imports ----------
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder

"""# Read database without preprocessing"""

### ---------- Read database ----------
dataset = pd.read_csv('diabetes.csv', sep=';')

dataset.head()

### ---------- verificando o tamanho do dataset ----------
print("Informações Sobre o Dataset")
print("Variáveis:\t {}".format(dataset.shape[1]))
print("Entradas:\t {}\n".format(dataset.shape[0]))
print("O dataset apresenta dados ausentes:\n")

### ---------- identificando os tipos das variáveis ----------
display(dataset.info())

### ----------- distribuição estátistica da base de dados -----------
dataset.describe()

### ----------- distribuição estatística das variáveis categóricas -----------
dataset.describe(include='O')

### ----------- Função para retornar o percentual de dados ausentes do dataframe -----------
def missing_values(df):
        mis_val = df.isnull().sum()
        mis_val_percent = 100 * df.isnull().sum() / len(df)
        mis_val_table = pd.concat([mis_val, mis_val_percent], axis=1)
        mis_val_table_ren_columns = mis_val_table.rename(
        columns = {0 : 'Missing Values', 1 : '% of Total Values'})
        mis_val_table_ren_columns = mis_val_table_ren_columns[
            mis_val_table_ren_columns.iloc[:,1] != 0].sort_values(
        '% of Total Values', ascending=False).round(1)
        print ("O DataFrame selecionado tem " + str(df.shape[1]) + " colunas.\n"      
            "Há " + str(mis_val_table_ren_columns.shape[0]) +
              " colunas com valores ausentes")
        return mis_val_table_ren_columns

missing_values(dataset)

"""# Separate columns with relevant data"""

### ---------- Create new data set with selected questions ----------
newDataset = dataset[['V0001',
                      'C006', 'C00701', 'C00702', 'C00703','C008', 
                      'I001', 
                      'P001', 'P002', 'P008', 'P009', 'P016', 'P017', 'P018', 'P019', 'P020', 'P021', 'P022', 'P025',
                      'P026', 'P027', 'P028', 'P029', 'P031', 'P034', 'P035', 'P036', 'P03701', 'P03702', 'P038', 'P039',
                      'P040', 'P04101', 'P04102', 'P045', 'P046', 'P047', 'P048', 'P049',
                      'Q029', 'Q030', 'Q031', 'Q032', 'Q033', 'Q035', 'Q036', 'Q037', 'Q038', 'Q039', 'Q040', 'Q041', 
                      'Q042', 'Q043', 'Q04701', 'Q04702', 'Q04703', 'Q04704', 'Q04705', 'Q048', 'Q050', 'Q05501', 'Q05502', 
                      'Q05503', 'Q05504', 'Q05505', 'Q05506', 'Q05507', 'Q05508', 'Q05509', 'Q056', 'Q057', 'Q058' ]]
newDataset.head()

### ---------- verificando o tamanho do newDataset ----------
print("Informações Sobre o Dataset")
print("Variáveis:\t {}".format(newDataset.shape[1]))
print("Entradas:\t {}\n".format(newDataset.shape[0]))
print("O dataset apresenta dados ausentes:\n")

### ---------- identificando os tipos das variáveis ----------
display(newDataset.info())

### ----------- distribuição estátistica da base de dados -----------
newDataset.describe()

### ----------- distribuição estatística das variáveis categóricas -----------
newDataset.describe(include='O')

missing_values(newDataset)

"""# Delete columns with more than 60% of missing data"""

### ---------- Columns deleted: Q057,  Q033, P049, Q037*, P048, P036*, Q036, Q035, Q038: Total__9 columns ----------
datasetFillOfData = newDataset[['V0001',
                                'C006', 'C00701', 'C00702', 'C00703','C008', 
                                'I001', 
                                'P001', 'P002', 'P008', 'P009', 'P016', 'P017', 'P018', 'P019', 'P020', 'P021', 'P022', 'P025',
                                'P026', 'P027', 'P028', 'P029', 'P031', 'P034', 'P035', 'P03701', 'P03702', 'P038', 'P039',
                                'P040', 'P04101', 'P04102', 'P045', 'P046', 'P047',
                                'Q029', 'Q030', 'Q031', 'Q032', 'Q039', 'Q040', 'Q041', 
                                'Q042', 'Q043', 'Q04701', 'Q04702', 'Q04703', 'Q04704', 'Q04705', 'Q048', 'Q050', 'Q05501', 'Q05502', 
                                'Q05503', 'Q05504', 'Q05505', 'Q05506', 'Q05507', 'Q05508', 'Q05509', 'Q056', 'Q058' ]]
datasetFillOfData.head()

### ---------- verificando o tamanho do datasetFillOfData ----------
print("Informações Sobre o Dataset")
print("Variáveis:\t {}".format(datasetFillOfData.shape[1]))
print("Entradas:\t {}\n".format(datasetFillOfData.shape[0]))
print("O dataset apresenta dados ausentes:\n")

### ---------- identificando os tipos das variáveis ----------
display(datasetFillOfData.info())

### ----------- distribuição estátistica da base de dados -----------
datasetFillOfData.describe()

### ----------- distribuição estatística das variáveis categóricas -----------
datasetFillOfData.describe(include='O')

missing_values(datasetFillOfData)

"""# Using moda to fill columns with missing data"""

### ----------- Fill dataset with moda -----------
pd.options.mode.chained_assignment = None  
datasetFillOfData['Q048'] = datasetFillOfData['Q048'].fillna(datasetFillOfData['Q048'].mode()[0])
datasetFillOfData['Q04702'] = datasetFillOfData['Q04702'].fillna(datasetFillOfData['Q04702'].mode()[0])
datasetFillOfData['Q041'] = datasetFillOfData['Q041'].fillna(datasetFillOfData['Q041'].mode()[0])
datasetFillOfData['Q05501'] = datasetFillOfData['Q05501'].fillna(datasetFillOfData['Q05501'].mode()[0])
datasetFillOfData['Q050'] = datasetFillOfData['Q050'].fillna(datasetFillOfData['Q050'].mode()[0])

datasetFillOfData['Q04701'] = datasetFillOfData['Q04701'].fillna(datasetFillOfData['Q04701'].mode()[0])
datasetFillOfData['Q05505'] = datasetFillOfData['Q05505'].fillna(datasetFillOfData['Q05505'].mode()[0])
datasetFillOfData['Q04705'] = datasetFillOfData['Q04705'].fillna(datasetFillOfData['Q04705'].mode()[0])
datasetFillOfData['Q04704'] = datasetFillOfData['Q04704'].fillna(datasetFillOfData['Q04704'].mode()[0])
datasetFillOfData['Q04703'] = datasetFillOfData['Q04703'].fillna(datasetFillOfData['Q04703'].mode()[0])

datasetFillOfData['Q040'] = datasetFillOfData['Q040'].fillna(datasetFillOfData['Q040'].mode()[0])
datasetFillOfData['Q05502'] = datasetFillOfData['Q05502'].fillna(datasetFillOfData['Q05502'].mode()[0])
datasetFillOfData['Q056'] = datasetFillOfData['Q056'].fillna(datasetFillOfData['Q056'].mode()[0])
datasetFillOfData['Q05509'] = datasetFillOfData['Q05509'].fillna(datasetFillOfData['Q05509'].mode()[0])
datasetFillOfData['Q05508'] = datasetFillOfData['Q05508'].fillna(datasetFillOfData['Q05508'].mode()[0])

datasetFillOfData['Q042'] = datasetFillOfData['Q042'].fillna(datasetFillOfData['Q042'].mode()[0])
datasetFillOfData['Q05507'] = datasetFillOfData['Q05507'].fillna(datasetFillOfData['Q05507'].mode()[0])
datasetFillOfData['Q05506'] = datasetFillOfData['Q05506'].fillna(datasetFillOfData['Q05506'].mode()[0])
datasetFillOfData['Q05504'] = datasetFillOfData['Q05504'].fillna(datasetFillOfData['Q05504'].mode()[0])
datasetFillOfData['Q05503'] = datasetFillOfData['Q05503'].fillna(datasetFillOfData['Q05503'].mode()[0])

datasetFillOfData['Q043'] = datasetFillOfData['Q043'].fillna(datasetFillOfData['Q043'].mode()[0])
datasetFillOfData['P038'] = datasetFillOfData['P038'].fillna(datasetFillOfData['P038'].mode()[0])
datasetFillOfData['P039'] = datasetFillOfData['P039'].fillna(datasetFillOfData['P039'].mode()[0])
datasetFillOfData['P040'] = datasetFillOfData['P040'].fillna(datasetFillOfData['P040'].mode()[0])
datasetFillOfData['Q032'] = datasetFillOfData['Q032'].fillna(datasetFillOfData['Q032'].mode()[0])

datasetFillOfData['Q031'] = datasetFillOfData['Q031'].fillna(datasetFillOfData['Q031'].mode()[0])
datasetFillOfData['Q039'] = datasetFillOfData['Q039'].fillna(datasetFillOfData['Q039'].mode()[0])
datasetFillOfData['Q058'] = datasetFillOfData['Q058'].fillna(datasetFillOfData['Q058'].mode()[0])
datasetFillOfData['P021'] = datasetFillOfData['P021'].fillna(datasetFillOfData['P021'].mode()[0])
datasetFillOfData['P022'] = datasetFillOfData['P022'].fillna(datasetFillOfData['P022'].mode()[0])
datasetFillOfData['P017'] = datasetFillOfData['P017'].fillna(datasetFillOfData['P017'].mode()[0])
datasetFillOfData['P008'] = datasetFillOfData['P008'].fillna(datasetFillOfData['P008'].mode()[0])
datasetFillOfData['P019'] = datasetFillOfData['P019'].fillna(datasetFillOfData['P019'].mode()[0])
missing_values(datasetFillOfData)

"""# Graphs

"""

plt.rcParams["figure.figsize"] = (20,25)
datasetFillOfData.groupby(['V0001','Q030']).size().groupby(level=0).apply(
     lambda x: 100 * x / x.sum()
 ).to_frame().unstack().plot(kind='bar',stacked=False,legend=False)
plt.title('Diabetes')
plt.xlabel('Estado')
plt.legend(labels=['Recebeu diagnóstico', 'Não recebeu diagnóstico'])
plt.show()

datasetFillOfData.groupby(['C008', 'Q030']).size().groupby(level=0).apply(
     lambda x: 100 * x / x.sum()
 ).to_frame().unstack().plot(kind='line',stacked=False,legend=True)
plt.title('Diabetes por idade')
plt.xlabel('Idade')
plt.legend(labels=['Recebeu diagnóstico', 'Não recebeu diagnóstico'])
plt.show()